int tree[18][131072];
int szz = 1, depth;

void init(int dep, int i, int zmrl) {
	if (zmrl == 1) return;
	zmrl /= 2;
	init(dep + 1, i, zmrl), init(dep + 1, i + zmrl, zmrl);

	int a = 0, b = 0;
	while (a + b < zmrl * 2) {
		if (a >= zmrl) {
			tree[dep][i + zmrl + b] = tree[dep + 1][i + zmrl + b];
			b++;
		}
		else if (b >= zmrl) {
			tree[dep][i + zmrl + a] = tree[dep + 1][i + a];
			a++;
		}
		else {
			if (tree[dep + 1][i + a] < tree[dep + 1][i + zmrl + b]) {
				tree[dep][i + a + b] = tree[dep + 1][i + a];
				a++;
			}
			else {
				tree[dep][i + a + b] = tree[dep + 1][i + zmrl + b];
				b++;
			}
		}
	}
}

int find(int dep, int val, int a, int b, int ll, int rr) {
	if (b < ll || a > rr) return 0;
	if (rr <= b && ll >= a) {
		int l = ll, r = rr, mid;
		while (l <= r) {
			mid = (l + r) / 2;
			if (tree[dep][mid] > val) r = mid - 1;
			else l = mid + 1;
		}
		return l - ll;
	}
	return find(dep + 1, val, a, b, ll, (ll + rr) / 2) + find(dep + 1, val, a, b, (ll + rr) / 2 + 1, rr);
}

int main() {
	while (szz < n) szz *= 2;
	depth = ceil(log2(n));

	fill(tree[depth] + n, tree[depth] + szz, (int)1e9 + 10); // 무한대 값 배치
	for (int i = 0; i < n; i++)
		scanf("%d", &tree[depth][i]);
	init(0, 0, szz);
}