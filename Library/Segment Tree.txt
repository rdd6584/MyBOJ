#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <set>
#include <list>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
const ll MOD = 1e9 + 7;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v[200000]; queue<int> q; deque<int> dq;

int tree[524288];
pii num[200000];
int szz = 1;
int ttt = 0;

void init(int i) {
	if (i >= szz) return;
	init(i * 2); init(i * 2 + 1);
	tree[i] = tree[i * 2] + tree[i * 2 + 1];
}

int find(int i, int l, int r, int le, int ri) {
	if (le > r || ri < l) return 0;
	if (le >= l && ri <= r) return tree[i];
	return find(i * 2, l, r, le, (le + ri) / 2) + find(i * 2 + 1, l, r, (le + ri) / 2 + 1, ri);
}

void update(int i, int val) {
	i += szz;
	tree[i] += val;

	i /= 2;
	while (i) {
		tree[i] = tree[i * 2] + tree[i * 2 + 1];
		i /= 2;
	}
}

// sum(0 ~ a) = x인 a찾기
int worm(int i, int x) {
	if (tree[i] < x) return worm(i + 1, x - tree[i]);
	if (i >= szz) return i - szz;
	return worm(i * 2, x);
}

// dfs 넘버링
void go(int o, int pre) {
	num[o].first = ttt++;

	for (int i = 0; i < sz(v[o]); i++)
		if (v[o][i] != pre) go(v[o][i], o);
	num[o].second = ttt - 1;
}

int main() {
	while (szz < n) szz *= 2;
	go(0, -1);
}